#include "GameManager.h"

//키보드 관련
char GameManager::nowKey;
bool GameManager::KeyControl()
{
	char pressKey;   //키 값을 입력받아 저장할 변수

	//키가 입력되면 잡아준다
	if (_kbhit())
	{
		pressKey = _getch();
		nowKey = pressKey;

		return true; //입력 들어옴
	}
	return false; //입력 안 들어옴
}
std::pair<int, int>GameManager::KBInfo()
{
	//플레이어1 키값 : 위(119,87) 왼쪽(97,65) 오른쪽(100,68) 아래(115,83) 소화(9)
	//플레이어2 키값 : 위(72) 왼쪽(75) 오른쪽(77) 아래(80) 소화(48)
	switch (nowKey)
	{
	case ' ':			return { 0, KB::SPACE };
	case 119: case 87:	return { 1, KB::UP };
	case 97: case 65:	return { 1, KB::LEFT };
	case 100: case 68:	return { 1, KB::RIGHT };
	case 115: case 83:	return { 1, KB::DOWN };
	case 9:				return { 1, KB::EXT };
	case 72:			return { 2, KB::UP };
	case 75:			return { 2, KB::LEFT };
	case 77:			return { 2, KB::RIGHT };
	case 80:			return { 2, KB::DOWN };
	case 48:			return { 2, KB::EXT };
	}
	return { -1,-1 };
}
int GameManager::SelStage()
{
	GameScreen::map_sel_Draw(StageClear);

	int x = 24;
	int y = 12;
	while (1) {
		if (KeyControl())
		{
			std::pair<int, int>kb = KBInfo();
			switch (kb.second)
			{
			case KB::UP:
			{

				if (y > 12)
				{
					gotoxy(x - 2, y);
					printf(" ");
					gotoxy(x - 2, --y);
					printf(">");
				}
				break;
			}
			case KB::DOWN:
			{
				if (y < 16)
				{
					gotoxy(x - 2, y);
					printf(" ");
					gotoxy(x - 2, ++y);
					printf(">");
				}
				break;
			}
			case KB::EXT: case KB::SPACE:
			{
				return  y - 12;
			}
			}
		}
	}
}

//게임 흐름 관련
void GameManager::StartProgram()
{
	init();

	while (1)
	{
		//메뉴창 보여줌
		int sel = SelStage();

		if (sel == 4)
		{
			system("cls");
			gotoxy(8, 13);
			printf("종료를 원한다면 아무 키나 다시 입력해주세요.");
			ColorSet(0, 0);
			return;
		}

		//게임 누르면 게임 시작
		InitGame(sel);
		bool res = RunGame();
		if (res)
			ExitGame();
		system("cls");
	}
}
void GameManager::InitGame(int map_sort)
{
	system("cls");

	//맵 설정
	now_map = new GameMap(AllArr[map_sort]);

	//플레이어 초기화
	std::pair<int, int>pos1, pos2;
	switch (map_sort)
	{
	case MAPSORT::HAKJUNG:
	{
		pos1 = { 1,1 }; pos2 = { 17, 18 }; break;
	}
	case MAPSORT::DAEYANG_AI:
	{
		pos1 = { 1,1 }; pos2 = { 2, 1 }; break;
	}
	case MAPSORT::GWANGGAETO:
	{
		pos1 = { 1,1 }; pos2 = { 17, 23 }; break;
	}
	case MAPSORT::DAEYANG_HALL:
	{
		pos1 = { 7,22 }; pos2 = { 11, 22 }; break;
	}
	}
	player[0] = new Player(pos1);
	player[1] = new Player(pos2);
	GameMap* dc = (GameMap*)now_map;
	GameFinishFlag = GAMEFINISH::NONE;
	canSpread = 1;

	//시작시간 설정
	GameStartTime = GetTickCount64();

	//맵출력
	now_map->printMapAll();
}
bool GameManager::RunGame()
{
	while (1)
	{
		player[0]->updateExt("p1", 5); player[1]->updateExt("p2", 32);
		now_map->print_time_and_extinguisher_info(GameStartTime,
			player[0]->extinguisher, player[1]->extinguisher);
		if (ControlFire())
		{
			GameMap* temp = (GameMap*)now_map;
			temp->fireSpread();
		}

		if (!KeyControl()) continue;

		if (nowKey == 'b' || nowKey == 'B')
		{
			system("cls");
			return false;
		}
		else
		{
			//p1, p2 구분하여 실행
			auto kb = KBInfo();
			if (kb.second == EXT)
			{
				int ext = player[kb.first - 1]->playerExt();
				GameMap* temp = (GameMap*)now_map;
				if (ext == player[kb.first - 1]->EX::EXTINGUISHER)
				{
					if (player[kb.first - 1]->useExtinguisher())
						temp->doExt(player[kb.first - 1]->pos);
				}
				else if (ext == player[kb.first - 1]->EX::FIREPLUG)
				{
					if (player[kb.first - 1]->useFireplug())
						temp->doPlug(player[kb.first - 1]->pos);
				}
			}
			else if (kb.second != -1)
			{
				GetItem(kb);
			}
		}

		if (GameFinishFlag != GAMEFINISH::NONE)
			return true;
	}
}
void GameManager::ExitGame()
{
	Sleep(1000);
	if (GameFinishFlag == GAMEFINISH::CLEAR)
	{
		int gameover[19][25] = {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,2,2,2,2,2,1,2,2,2,2,2,1,2,1,1,1,2,1,2,2,2,2,2,1},
			{1,2,1,1,1,1,1,2,1,1,1,2,1,2,2,1,2,2,1,2,1,1,1,1,1},
			{1,2,1,1,2,2,1,2,2,2,2,2,1,2,1,2,1,2,1,2,2,2,2,2,1},
			{1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1},
			{1,2,2,2,2,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,2,2,2,2,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,2,2,2,2,1,2,1,1,1,2,2,2,2,1,2,2,2,2,1,2,2,2,2,1},
			{1,2,1,1,1,1,2,1,1,1,2,1,1,1,1,2,1,1,2,1,2,1,1,2,1},
			{1,2,1,1,1,1,2,1,1,1,2,2,2,2,1,2,2,2,2,1,2,2,2,2,1},
			{1,2,1,1,1,1,2,1,1,1,2,1,1,1,1,2,1,1,2,1,2,1,2,1,1},
			{1,2,2,2,2,1,2,2,2,1,2,2,2,2,1,2,1,1,2,1,2,1,1,2,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
		};

		int x = 5, y = 3;   //맵이 시작하는 가장 왼쪽 위 끝점의 좌표
		for (int j = 0; j < 25; j++) {
			for (int i = 0; i < 19; i++) {
				gotoxy(x + j * 2, y + i);
				if (gameover[i][j] == 1) {
					ColorSet(0, 0);
					printf("■");
				}

				else if (gameover[i][j] == 0) {
					ColorSet(0, 11);
					printf("■");
				}

				else {
					ColorSet(0, 11);
					printf("■");
				}
			}

			Sleep(30);
		}
	}
	else if (GameFinishFlag == GAMEFINISH::OVER)
	{
		int gameover[19][25] = {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,2,2,2,2,2,1,2,2,2,2,2,1,2,1,1,1,2,1,2,2,2,2,2,1},
			{1,2,1,1,1,1,1,2,1,1,1,2,1,2,2,1,2,2,1,2,1,1,1,1,1},
			{1,2,1,1,2,2,1,2,2,2,2,2,1,2,1,2,1,2,1,2,2,2,2,2,1},
			{1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1},
			{1,2,2,2,2,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,2,2,2,2,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,2,2,2,2,2,1,2,1,1,1,2,1,2,2,2,2,2,1,2,2,2,2,2,1},
			{1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,2,1,1,1,2,1},
			{1,2,1,1,1,2,1,2,1,1,1,2,1,2,2,2,2,2,1,2,2,2,2,2,1},
			{1,2,1,1,1,2,1,1,2,1,2,1,1,2,1,1,1,1,1,2,1,1,2,1,1},
			{1,2,2,2,2,2,1,1,1,2,1,1,1,2,2,2,2,2,1,2,1,1,1,2,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
		};

		int x = 5, y = 3;   //맵이 시작하는 가장 왼쪽 위 끝점의 좌표
		for (int j = 0; j < 25; j++) {
			for (int i = 0; i < 19; i++) {
				gotoxy(x + j * 2, y + i);
				if (gameover[i][j] == 1) {
					ColorSet(0, 0);
					printf("■");
				}

				else if (gameover[i][j] == 0) {
					ColorSet(0, 12);
					printf("■");
				}

				else {
					ColorSet(0, 12);
					printf("■");
				}
			}

			Sleep(30);
		}
	}
	Sleep(1500);
}

//게임 클리어 관리
void GameManager::GameFinish()
{
	GameMap* temp = (GameMap*)now_map;
	if (temp->finish_way == 2)
	{
		std::pair<int, int>p[2];
		p[temp->dest[0].second] = temp->dest[0].first;
		p[temp->dest[1].second] = temp->dest[1].first;
		if (player[0]->pos == p[0] && player[1]->pos == p[1])
			GameFinishFlag = GAMEFINISH::CLEAR;
	}
	else if (temp->finish_way == 3)
	{
		int cnt = 0;
		for (int i = 0; i < 3; i++)
		{
			std::pair<int, int>p;
			p = temp->dest[i].first;
			if (p == player[0]->pos || p == player[1]->pos)
				cnt++;
		}
		if (cnt == 2)
			GameFinishFlag = GAMEFINISH::CLEAR;
	}
}

//맵과 플레이어 이어주기
void GameManager::GetItem(std::pair<int, int>& kb)
{
	auto to = player[kb.first - 1]->playerMove(kb.second);

	//downcasting
	GameMap* temp = (GameMap*)now_map;
	int next = temp->frameArr[to.first][to.second];
	bool res = temp->Map_MovePlayer(kb.first, player[kb.first - 1]->pos, to);
	if (res) //이동가능하다면 player클래스도 업데이트
	{
		player[kb.first - 1]->pos = to;

		// 불, 엘리베이터였을 경우
		if (next == temp->ITEM::FIRE || next == temp->ITEM::EV)
			GameFinishFlag = GAMEFINISH::OVER;
		//목적지 도착인 경우
		else if (next == temp->ITEM::DEST0 || next == temp->ITEM::DEST1 || next == temp->ITEM::DEST2)
			GameFinish();
		//소화기, 소화전인 경우
		else if (next == temp->ITEM::EXTINGUISHER)
			player[kb.first - 1]->getItem(player[kb.first - 1]->EX::EXTINGUISHER);
		else if (next == temp->ITEM::PLUG)
			player[kb.first - 1]->getItem(player[kb.first - 1]->EX::FIREPLUG);
	}
}

int GameManager::tempCnt = 0;
bool GameManager::ControlFire()
{
	int nowTime = (GetTickCount64() - GameStartTime) / 1000;
	if (nowTime % 10 == 0 && nowTime / 10 == canSpread)
	{
		canSpread++;
		return true;
	}
	return false;
}


//맵 기억
int GameManager::AllArr[4][19][25] =
{
	{ //HAKJUNG
		   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		   {1,2,0,0,1,0,0,0,4,1,0,0,0,0,1,4,0,0,0,0,5,1,0,4,1},
		   {1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0,1},
		   {1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,1},
		   {1,4,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1},
		   {1,0,0,0,1,0,0,1,9,0,0,4,0,1,1,1,1,1,0,0,0,1,1,0,1},
		   {1,1,1,1,1,0,0,1,4,6,6,0,0,1,10,0,0,1,1,1,0,1,0,0,1},
		   {1,0,0,0,0,0,5,1,0,0,1,1,1,0,5,1,1,1,0,0,0,1,0,1,1},
		   {1,4,0,1,0,0,0,0,0,1,0,4,1,0,0,9,0,0,0,0,1,1,0,0,1},
		   {1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1},
		   {1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,9,1,0,0,0,0,0,0,1,1},
		   {1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,1},
		   {1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,4,1,0,1,0,5,0,0,0,1},
		   {1,1,0,0,0,0,0,1,0,1,0,1,9,1,3,0,1,0,1,0,0,1,0,0,1},
		   {1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1},
		   {1,0,1,1,5,0,0,1,0,0,0,4,0,0,1,1,1,1,1,0,0,1,1,1,1},
		   {1,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,1},
		   {1,4,0,1,0,1,4,0,0,0,0,1,0,0,1,4,0,0,8,0,0,0,0,4,1},
		   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	},
	{ //DAEYANG_AI
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,2,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1},
			{1,8,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,0,1},
			{1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1},
			{1,0,0,0,1,9,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1},
			{1,0,0,0,1,0,0,0,0,0,6,1,0,6,6,1,0,0,1,1,1,1,1,0,1},
			{1,1,1,1,1,0,0,6,6,6,4,0,0,6,6,1,0,0,4,0,4,0,1,0,1},
			{1,11,0,0,0,0,0,0,0,0,0,0,0,6,6,1,0,0,1,0,1,0,0,0,1},
			{1,1,1,1,0,5,0,0,6,6,6,0,0,6,6,1,0,0,1,0,0,0,1,1,1},
			{1,0,4,1,4,0,0,6,0,0,0,0,0,6,6,1,5,0,0,0,1,0,0,0,1},
			{1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,4,1,1,1,0,1,1,1,1,1},
			{1,0,1,0,1,0,1,1,9,1,1,0,1,0,0,0,0,0,0,0,0,4,0,11,1},
			{1,0,0,0,0,0,1,0,1,0,1,5,0,0,1,0,1,1,1,1,9,1,0,0,1},
			{1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1},
			{1,0,1,0,0,0,0,0,1,0,1,0,0,4,1,0,1,0,1,0,0,1,0,0,1},
			{1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,1},
			{1,0,1,0,0,0,0,0,0,0,1,0,11,0,1,0,1,0,0,1,0,1,0,0,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	},
	{ //GWANGGAETO
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,2,0,1,0,5,0,1,0,0,0,1,4,0,0,1,1,1,1,4,0,0,1,10,1},
			{1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,1},
			{1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,1},
			{1,0,0,0,4,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1},
			{1,5,1,1,1,1,0,1,0,0,5,0,0,0,0,0,0,0,1,0,1,5,0,0,1},
			{1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1},
			{1,0,1,5,1,0,0,0,0,1,0,0,1,5,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,5,0,0,0,4,1},
			{1,9,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,1,5,5,5,1,1,1,1},
			{1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,6,6,6,1},
			{1,0,0,0,0,0,0,5,5,1,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1,0,4,0,1,1,4,1,0,1,4,0,6,6,6,1},
			{1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,1,1},
			{1,0,0,5,1,4,0,1,3,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1},
			{1,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1,1},
			{1,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,5,1,0,1,0,0,1},
			{1,9,0,0,0,0,0,0,0,0,0,1,9,1,0,6,6,6,6,1,9,0,0,8,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	},
	{ //DAEYANG_HALL
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,4,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1},
			{11,0,0,1,6,0,0,0,5,0,0,1,1,0,1,6,6,6,0,0,1,1,1,1,1},
			{1,0,0,0,6,0,1,1,1,0,4,1,6,0,0,0,0,0,0,0,0,0,0,0,1},//끝
			{1,0,0,0,0,0,1,1,1,1,0,0,6,0,4,1,1,1,0,0,0,0,0,1,1},
			{1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,2,1,1},
			{1,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1},
			{11,0,0,1,1,0,4,1,1,1,0,0,5,0,0,0,0,0,0,0,0,0,0,1,1},
			{1,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1},
			{1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,8,1,1},
			{1,0,0,0,0,0,1,1,1,1,0,0,6,0,4,1,1,1,0,0,0,0,0,1,1},
			{1,0,0,0,6,0,1,1,1,0,4,1,6,0,0,0,0,0,0,0,0,0,0,0,1},//끝
			{11,0,0,1,6,0,0,0,5,0,0,1,1,0,1,6,6,6,0,0,1,1,1,1,1},
			{1,0,0,1,1,5,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	}
};